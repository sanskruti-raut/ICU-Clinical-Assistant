AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with public/private subnets, EC2 with SSM role in private subnet, PostgreSQL RDS

Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for EC2 instance
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 SSH Key Pair
  DBUsername:
    Type: String
    NoEcho: true
    Description: Master username for PostgreSQL
    Default: postgres
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master password for PostgreSQL

Resources:

  # === VPC and Subnets ===
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: ICUVPC }]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: PublicSubnet }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-west-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-west-1b

  # === Internet Gateway ===
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: ICUIGW }]

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW

  # === NAT Gateway ===
  NatEIP:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatEIP.AllocationId
      Tags: [{ Key: Name, Value: NatGateway }]

  # === Route Tables ===
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags: [{ Key: Name, Value: PublicRouteTable }]

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  PublicRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags: [{ Key: Name, Value: PrivateRouteTable }]

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # === Security Groups ===
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref MyVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: EC2SG }]

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 access to RDS
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags: [{ Key: Name, Value: RDSSG }]

  # === IAM Role for SSM ===
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SSMPolicyWithS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:*
                  - ssmmessages:*
                  - ec2messages:*
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::vital-databucket/*"

  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref SSMRole]

  # === EC2 Instance ===
  PrivateEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags: [{ Key: Name, Value: PrivateInstance }]

  # === DB Subnet Group ===

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2


  # === RDS Instance ===
  MyRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: vitaldb
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      BackupRetentionPeriod: 0
      DeletionProtection: false
      StorageType: gp2
      Tags: [{ Key: Name, Value: vitalwatch-rds }]

Outputs:
  VPCId:
    Value: !Ref MyVPC
  PrivateInstanceId:
    Value: !Ref PrivateEC2
  RDSHost:
    Value: !GetAtt MyRDS.Endpoint.Address
    Description: RDS endpoint

  Resources:

  # --- Application Load Balancer ---
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Type: application

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TG"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref AcmCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

  # --- Launch Configuration for ASG ---
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0123456789abcdef0     # your Node.js AMI
      InstanceType: t3.micro
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          # install Docker / Node.js or pull container, etc.
          # fetch model weights from S3
          aws s3 cp s3://${ModelBucket}/weights.tar.gz /opt/weights/
          # start your Node server
          pm2 start /srv/app/index.js

  # --- Auto Scaling Group ---
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref AlbTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 60
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-web"
          PropagateAtLaunch: true
