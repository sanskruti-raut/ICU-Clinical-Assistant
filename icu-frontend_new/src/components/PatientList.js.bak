import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { fetchPatientSepsisScore } from '../utils/api';

function PatientList({ patients }) {
  const [patientsWithScores, setPatientsWithScores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [errorMessage, setErrorMessage] = useState(null);

  useEffect(() => {
    const loadSepsisScores = async () => {
      if (!patients || patients.length === 0) {
        setPatientsWithScores([]);
        setLoading(false);
        return;
      }

      setLoading(true);
      setErrorMessage(null);

      try {
        // Create an array of promises to fetch sepsis scores for all patients
        const scoresPromises = patients.map(async (patient) => {
          try {
            // Use the utility function from api.js that handles the correct endpoint
            const response = await fetchPatientSepsisScore(patient.id);
            console.log(`Score for patient ${patient.id}:`, response);
            return {
              ...patient,
              sepsisScore: response.risk_score !== null && response.risk_score !== undefined ?
                response.risk_score : 'N/A',
              scoreNote: response.note || null
            };
          } catch (error) {
            console.error(`Error fetching score for patient ${patient.id}:`, error);
            return {
              ...patient,
              sepsisScore: 'Error',
              scoreNote: error.message || 'Failed to fetch score'
            };
          }
        });

        // Wait for all promises to resolve
        const patientsData = await Promise.all(scoresPromises);
        console.log("Patients with scores:", patientsData);
        setPatientsWithScores(patientsData);
      } catch (error) {
        console.error("Error loading sepsis scores:", error);
        setErrorMessage("Failed to load patient risk scores. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    loadSepsisScores();
  }, [patients]);

  // Function to truncate text with read more link
  const truncateDiseases = (diseases, maxLength = 100) => {
    if (!diseases) return 'None specified';
    if (diseases.length <= maxLength) return diseases;

    // Split by commas and take first 3 conditions
    const diseaseArray = diseases.split(',');
    if (diseaseArray.length <= 3) {
      return diseases.substring(0, maxLength) + '...';
    }

    return diseaseArray.slice(0, 3).join(',') +
      ` <span class="read-more"
        title="${diseases}"
        style="color: #1976d2; cursor: pointer; font-weight: 500; text-decoration: underline;">
        +${diseaseArray.length - 3} more...
      </span>`;
  };

  // Memoize the color calculation function to improve performance
  const getSepsisScoreColor = useMemo(() => (score) => {
    if (score === 'N/A' || score === 'Error') return '#888';

    // Convert score to number if it's a string
    const numScore = typeof score === 'string' ? parseFloat(score) : score;

    if (numScore < 0.3) return '#4caf50';  // Low risk - green
    if (numScore < 0.6) return '#ff9800';  // Medium risk - orange
    return '#f44336';  // High risk - red
  }, []);

  // Function to format sepsis score display
  const formatSepsisScore = (score) => {
    if (score === 'N/A' || score === 'Error') return score;

    // Format number to percentage with 1 decimal place
    return `${(parseFloat(score) * 100).toFixed(1)}%`;
  };

  // Function to get risk label
  const getRiskLabel = (score) => {
    if (score === 'N/A' || score === 'Error') return '';
    
    const numScore = typeof score === 'string' ? parseFloat(score) : score;
    
    if (numScore < 0.3) return 'Low';
    if (numScore < 0.6) return 'Medium';
    return 'High';
  };

  const hasScoreErrors = useMemo(() => {
    return patientsWithScores.some(patient => patient.sepsisScore === 'Error');
  }, [patientsWithScores]);

  return (
    <div className="card">
      <h2 className="card-title">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#1976d2" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" style={{ marginRight: '8px' }}>
          <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
          <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
          <path d="M9 14l2 2 4-4"></path>
        </svg>
        Priority Patients
      </h2>

      {errorMessage && (
        <div className="error-message">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          <p>{errorMessage}</p>
        </div>
      )}

      {hasScoreErrors && !errorMessage && (
        <div className="warning-message">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
          <p>Some risk scores could not be loaded. This may be due to missing data or server issues.</p>
        </div>
      )}

      {loading ? (
        <div className="loading-indicator">
          <div className="spinner"></div>
          <p>Loading patient data...</p>
        </div>
      ) : patientsWithScores.length === 0 ? (
        <p>No priority patients found.</p>
      ) : (
        <div className="table-responsive">
          <table className="table">
            <thead>
              <tr>
                <th style={{ width: '12%' }}>ID</th>
                <th style={{ width: '8%' }}>Age</th>
                <th style={{ width: '10%' }}>Gender</th>
                <th style={{ width: '35%' }}>Primary Conditions</th>
                <th style={{ width: '20%', textAlign: 'center' }}>Sepsis Risk</th>
                <th style={{ width: '15%', textAlign: 'center' }}>Action</th>
              </tr>
            </thead>
            <tbody>
              {patientsWithScores.map((patient) => (
                <tr key={patient.id} className={patient.sepsisScore > 0.7 ? 'high-risk-row' : ''}>
                  <td>
                    <span className="patient-id">{patient.id}</span>
                  </td>
                  <td>
                    <div className="age-badge">{patient.age}</div>
                  </td>
                  <td>
                    <div className={`gender-icon ${patient.gender === 'F' ? 'female' : 'male'}`}>
                      {patient.gender === 'F' ? '♀' : '♂'}
                    </div>
                  </td>
                  <td dangerouslySetInnerHTML={{ __html: truncateDiseases(patient.diseases) }}></td>
                  <td style={{ textAlign: 'center' }}>
                    <div className="sepsis-score-container">
                      <div
                        className={`sepsis-score ${patient.sepsisScore === 'Error' ? 'error' : ''}`}
                        style={{
                          backgroundColor: getSepsisScoreColor(patient.sepsisScore) + '20',
                          color: getSepsisScoreColor(patient.sepsisScore)
                        }}
                        title={patient.scoreNote || ''}
                      >
                        {formatSepsisScore(patient.sepsisScore)}
                        {patient.sepsisScore !== 'N/A' && patient.sepsisScore !== 'Error' && (
                          <span className="risk-label">
                            {getRiskLabel(patient.sepsisScore)} Risk
                          </span>
                        )}
                      </div>
                      {patient.scoreNote && (
                        <div className="score-note-indicator" title={patient.scoreNote}>
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="16" x2="12" y2="12"></line>
                            <line x1="12" y1="8" x2="12.01" y2="8"></line>
                          </svg>
                        </div>
                      )}
                    </div>
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    <Link to={`/patient/${patient.id}`}>
                      <button className="btn btn-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" style={{ marginRight: '4px' }}>
                          <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                          <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        View
                      </button>
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <style jsx="true">{`
        .table-responsive {
          overflow-x: auto;
        }
        .table {
          width: 100%;
          border-collapse: collapse;
          table-layout: fixed;
        }
        .table th, .table td {
          padding: 12px 15px;
          text-align: left;
          border-bottom: 1px solid #e0e0e0;
        }
        .table th {
          font-weight: 500;
          color: #666;
          white-space: nowrap;
        }
        .high-risk-row {
          background-color: rgba(244, 67, 54, 0.05);
        }
        .high-risk-row:hover {
          background-color: rgba(244, 67, 54, 0.1) !important;
        }
        .patient-id {
          font-weight: 500;
          color: #1976d2;
        }
        .gender-icon {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
        }
        .female {
          background-color: #f8bbd0;
          color: #c2185b;
        }
        .male {
          background-color: #bbdefb;
          color: #1976d2;
        }
        .age-badge {
          background-color: #e8eaf6;
          color: #3949ab;
          border-radius: 12px;
          padding: 4px 8px;
          display: inline-block;
          font-weight: 500;
          text-align: center;
        }
        .sepsis-score-container {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
        }
        .sepsis-score {
          padding: 6px 12px;
          border-radius: 4px;
          font-weight: bold;
          display: inline-flex;
          flex-direction: column;
          align-items: center;
          min-width: 80px;
          transition: transform 0.2s;
        }
        .sepsis-score:hover {
          transform: translateY(-2px);
        }
        .sepsis-score.error {
          cursor: help;
        }
        .risk-label {
          font-size: 0.7rem;
          opacity: 0.8;
          margin-top: 3px;
        }
        .score-note-indicator {
          color: #888;
          cursor: help;
        }
        .read-more:hover {
          text-decoration: none;
        }
        .loading-indicator {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 20px;
        }
        .spinner {
          border: 3px solid rgba(0, 0, 0, 0.1);
          border-radius: 50%;
          border-top: 3px solid #1976d2;
          width: 24px;
          height: 24px;
          animation: spin 1s linear infinite;
          margin-bottom: 10px;
        }
        .error-message, .warning-message {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 12px 16px;
          margin-bottom: 16px;
          border-radius: 4px;
        }
        .error-message {
          background-color: #ffebee;
          color: #c62828;
          border-left: 4px solid #c62828;
        }
        .warning-message {
          background-color: #fff8e1;
          color: #ff8f00;
          border-left: 4px solid #ff8f00;
        }
        .error-message svg, .warning-message svg {
          flex-shrink: 0;
        }
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        .btn {
          white-space: nowrap;
        }
      `}</style>
    </div>
  );
}

export default PatientList;
